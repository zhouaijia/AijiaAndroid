plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
}

//apply from: "prepareEnv.gradle" //开发、测试、正式环境

android {
    namespace 'com.aijia.android'
    compileSdk rootProject.android.compileSdk

    defaultConfig {
        applicationId rootProject.android.applicationId
        minSdk rootProject.android.minSdk
        targetSdk rootProject.android.targetSdk
        versionCode rootProject.android.versionCode
        versionName rootProject.android.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        kapt {
            arguments {
                arg("AROUTER_MODULE_NAME", project.getName())
            }
        }
        ndk {
            setAbiFilter()
        }

        /*manifestPlaceholders = [
                BASE_URL_API : getApiBaseURL(),
                BASE_URL_AUTH: getAuthBaseURL()
        ]*/
    }

    signingConfigs {
        debug {
            storeFile file(rootProject.signingConfig.storeFile)
            storePassword rootProject.signingConfig.storePassword
            keyAlias rootProject.signingConfig.keyAlias
            keyPassword rootProject.signingConfig.keyPassword
        }
        release {
            storeFile file(rootProject.signingConfig.storeFile)
            storePassword rootProject.signingConfig.storePassword
            keyAlias rootProject.signingConfig.keyAlias
            keyPassword rootProject.signingConfig.keyPassword
        }
    }

    buildTypes {
        release {
            minifyEnabled true      //混淆
            zipAlignEnabled true    //zipalign优化armeabi
            shrinkResources true    //移除无用的resource
            signingConfig signingConfigs.release
            //加载混淆配置文件
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            signingConfig signingConfigs.debug
            debuggable true
            minifyEnabled false
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        dataBinding = true
        viewBinding = true
    }
}

/**
 * 筛选so的CPU架构类型
 * 若是发布到国内市场，则可以暂时不要64位的x86和mips，
 * 若打的包是发不到GooglePlay的，则32位和64位的so都得有
 */
def setAbiFilter() {
    def chinaChannelFilters = new String[]{'armeabi', 'armeabi-v7a', 'arm64-v8a', "x86", "mips"}

    try {
        def channel = rootProject.ext.publishChannel
        switch (rootProject.extensions.getByName(channel.KEY_TARGET_CHANNEL)) {
            case channel.CHINA:
                android.defaultConfig.ndk.abiFilters chinaChannelFilters
                break

            case channel.GOOGLEPLAY:
                android.defaultConfig.ndk.abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a', "x86", "x86_64", "mips", "mips64"
                break

            default://默认是国内
                android.defaultConfig.ndk.abiFilters chinaChannelFilters
        }
    } catch(Throwable t) {
        // 开发时不通过命令行执行编译，“rootProject.extensions.getByName(channel.KEY_TARGET_CHANNEL)”代码
        // 报错：找不到变量。这里需要设置默认值
        android.defaultConfig.ndk.abiFilters chinaChannelFilters
        t.printStackTrace()
    }
}

dependencies {
    implementation rootProject.depsLibs.coreKtx
    implementation rootProject.depsLibs.appcompat
    implementation rootProject.depsLibs.material
    testImplementation rootProject.depsLibs.junit
    androidTestImplementation rootProject.depsLibs.extJunit
    androidTestImplementation rootProject.depsLibs.espressoCore

    implementation rootProject.depsLibs.multidex

    implementation rootProject.depsLibs.arouterApi
    kapt rootProject.depsLibs.arouterCompiler

    implementation rootProject.depsLibs.mmkv
    implementation rootProject.depsLibs.gson

    implementation rootProject.depsLibs.refreshLayout
    implementation rootProject.depsLibs.refreshHeader
    implementation rootProject.depsLibs.refreshFooter

    implementation project(path: ':mod_main')
    //implementation project(path: ':mod_user')
    //implementation project(path: ':mod_login')
    implementation project(path: ':lib_framework')
    implementation project(path: ':lib_common')
    implementation project(path: ':lib_starter')
    implementation project(path: ':lib_webview')

}